{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# D&D Dice Fraud Detection Software"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0. Global Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please keep this area tidy. We separate the project into multiple segments, this one concerns generation and assembly of a dice-statistics dataset. This is done so as to avoid environment conflicts specifically around TensorFlow. \n",
    "\n",
    "Please comment out all testing code that produce printouts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Generate Real Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Real data is generated by the formula as printed in the book: 4d6dl1 i.e. the sum of four random numbers in (1,6) of which the lowest is dropped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "N_real=50000\n",
    "N_fake=10000\n",
    "#Tweak these numbers multiplicatively by the same ratio."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def FourSixSidedDiceDropLowest():\n",
    "    randnums= np.random.randint(1,7,4)\n",
    "    return sum(np.delete(np.sort(randnums),0))\n",
    "\n",
    "realSample=np.array([[FourSixSidedDiceDropLowest() for i in range(6)] for i in range(N_real)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Generate different types of faked data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We must use a great variety of formulae or algorithms in order to present faked data.\n",
    "Main suggestions:\n",
    "* More dice, more dropped: 5d6dl2 will make the average go up while keeping the upper bound the same. Up to and including (x+1)d20dlx to make it very obvious\n",
    "* Smaller dice: 6d4dl2 has lower upper bound as 4d6dl1 but a higher average\n",
    "* Drop fewer dice: more extreme outliers can be generated by removing fewer dice. This pushes the upper bound beyond 18, which is obviously impossible, but the algorithm should see it to know. \n",
    "* Roll dice set multiple times and keep the \"best\": high-average, low-variance stat sets are infrequent but manifestly better. An example ''goodness indicator'' is the following formula: mu / (5 + sigma)\n",
    "* For good measure, ''handicap'' sets should also be given, so that the algorithm doesn't automatically think any statistical upper outlier is a cheat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#This function implements any arbitrary XdYdlZ formula. All dice are assumed identical.\n",
    "def numbersizedrop(number,size,drop):\n",
    "    randnums= np.random.randint(1,size+1,number)\n",
    "    return sum(np.delete(np.sort(randnums),range(drop)))\n",
    "\n",
    "#This implements the \"get lucky\" algorithm whereby we keep rolling until\n",
    "#we find a good statistical outlier with high average and low variance\n",
    "def keeprolling(number,size,drop,targetcoeff):\n",
    "    coeff=0\n",
    "    i=0\n",
    "    while coeff < targetcoeff:\n",
    "        tstats= np.array([numbersizedrop(number,size,drop) for i in range(6)])\n",
    "        i+=1\n",
    "        if coeff < 2*np.mean(tstats) / (5+ np.std(tstats)):\n",
    "            coeff =2*np.mean(tstats) / (5+ np.std(tstats))\n",
    "            stats=tstats\n",
    "            #print('New candidate at step {2}: coeff. {0} with stats {1}'.format(coeff, stats, i))\n",
    "    #print('Final candidate at step {2}, coeff {0} with stats {1}'.format(coeff, stats,i))\n",
    "    return stats    \n",
    "        \n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We use a concatenation of ndarrays so that the code is somewhat scalable.\n",
    "#Adding a new generation method is then simply a case of pasting another block.\n",
    "#This also makes converting the data easier since we can use an enumerator.\n",
    "fakeSample=np.array([[[numbersizedrop(5,6,2) for i in range(6)] for i in range(N_fake)]])\n",
    "\n",
    "fakeSample=np.concatenate(\n",
    "    (\n",
    "        fakeSample,\n",
    "         np.array([[[numbersizedrop(6,4,2) for i in range(6)] for i in range(N_fake)]])\n",
    "    )\n",
    "    ,axis=0)\n",
    "\n",
    "fakeSample=np.concatenate(\n",
    "    (\n",
    "        fakeSample,\n",
    "         np.array([[[numbersizedrop(6,20,5) for i in range(6)] for i in range(N_fake)]])\n",
    "    )\n",
    "    ,axis=0)\n",
    "\n",
    "fakeSample=np.concatenate(\n",
    "    (\n",
    "        fakeSample,\n",
    "         np.array([[[numbersizedrop(3,20,2) for i in range(6)] for i in range(N_fake)]])\n",
    "    )\n",
    "    ,axis=0)\n",
    "\n",
    "fakeSample=np.concatenate(\n",
    "    (\n",
    "        fakeSample,\n",
    "         np.array([[[numbersizedrop(4,6,2) for i in range(6)] for i in range(N_fake)]])\n",
    "    )\n",
    "    ,axis=0)\n",
    "\n",
    "fakeSample=np.concatenate(\n",
    "    (\n",
    "        fakeSample,\n",
    "         np.array([[[numbersizedrop(1,20,0) for i in range(6)] for i in range(N_fake)]])\n",
    "    )\n",
    "    ,axis=0)\n",
    "\n",
    "fakeSample=np.concatenate(\n",
    "    (\n",
    "        fakeSample,\n",
    "         np.array([[[numbersizedrop(4,4,0) for i in range(6)] for i in range(N_fake)]])\n",
    "    )\n",
    "    ,axis=0)\n",
    "\n",
    "fakeSample=np.concatenate(\n",
    "    (\n",
    "        fakeSample,\n",
    "         np.array([[[numbersizedrop(2,8,0) for i in range(6)] for i in range(N_fake)]])\n",
    "    )\n",
    "    ,axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#np.shape(fakeSample)[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Assemble data in Pandas DataFrames"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A Pandas DataFrame object is most naturally suited for statistical analysis and regression. Note that we should keep the Real and Faked data separate until the end of preprocessing in order to balance the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>15</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "      <td>16</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    1   2   3   4   5   6\n",
       "0  10  10  18  12  12  13\n",
       "1  13  15  13  16  12  13\n",
       "2  14   8  11  10  10  17\n",
       "3  10  12  15  17  15  11\n",
       "4  10  13   8  16  12  14"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "realDataRaw=pd.DataFrame(realSample, columns=['1','2','3','4','5','6'])\n",
    "#realDataRaw.describe()\n",
    "#realDataRaw.head()\n",
    "#describe() explores the statistics of the DataFrame, very useful to compare the various generation methods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fakeDataLists=[\n",
    "    pd.DataFrame(fakeSample[i], columns=['1','2','3','4','5','6']) for i in range(np.shape(fakeSample)[0])\n",
    "]\n",
    "N_fakecats=len(fakeDataLists)\n",
    "#DataFrames are necessarily two-dimensional, so to start with we make one frame per method for fake data. \n",
    "#This allows us to explore the statistics of the fake data before fusing it all together."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>13.386000</td>\n",
       "      <td>13.420500</td>\n",
       "      <td>13.409300</td>\n",
       "      <td>13.428700</td>\n",
       "      <td>13.488600</td>\n",
       "      <td>13.429800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>2.646905</td>\n",
       "      <td>2.594601</td>\n",
       "      <td>2.595852</td>\n",
       "      <td>2.610019</td>\n",
       "      <td>2.579328</td>\n",
       "      <td>2.587536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  1             2             3             4             5  \\\n",
       "count  10000.000000  10000.000000  10000.000000  10000.000000  10000.000000   \n",
       "mean      13.386000     13.420500     13.409300     13.428700     13.488600   \n",
       "std        2.646905      2.594601      2.595852      2.610019      2.579328   \n",
       "min        3.000000      4.000000      3.000000      3.000000      3.000000   \n",
       "25%       12.000000     12.000000     12.000000     12.000000     12.000000   \n",
       "50%       14.000000     14.000000     14.000000     14.000000     14.000000   \n",
       "75%       15.000000     15.000000     15.000000     15.000000     15.000000   \n",
       "max       18.000000     18.000000     18.000000     18.000000     18.000000   \n",
       "\n",
       "                  6  \n",
       "count  10000.000000  \n",
       "mean      13.429800  \n",
       "std        2.587536  \n",
       "min        3.000000  \n",
       "25%       12.000000  \n",
       "50%       14.000000  \n",
       "75%       15.000000  \n",
       "max       18.000000  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fakeDataLists[0].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">8</td>\n",
       "      <td>9995</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9996</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9997</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9998</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9999</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        1   2   3  4   5   6\n",
       "8 9995  6  11   4  6   8  12\n",
       "  9996  8  10   9  6   2  12\n",
       "  9997  9   8  10  9   7  13\n",
       "  9998  6   8   8  5   8   4\n",
       "  9999  9   7  11  7  15  10"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fakeDataRaw=pd.concat(\n",
    "    fakeDataLists \n",
    "    ,keys=[i+1 for i in range(np.shape(fakeSample)[0])]\n",
    "    #,ignore_index=True\n",
    ")    \n",
    "#pd.concat takes an optional list of keys to create a hierarchy of column values.\n",
    "#Alternatively, flatten all the data together with the ignore_index optional argument\n",
    "#fakeDataRaw.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can optionally save the raw data now for later exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "realDataRaw.to_pickle('realDataRaw.zip')\n",
    "fakeDataRaw.to_pickle('fakeDataRaw.zip')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Preprocess data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We must perform a variety of operations on the data before it is analysed by the ML algorithm.\n",
    "\n",
    "* __Balancing__: Ideally the ML algorithm has about as many data points in each category when trying to sort categorical or binary data, which in this case means aiming for a 50% true/false split. It is easiest to perform this operation here, since we must come up with many different ways of generating fake data, it will be tedious to control how much of the fake data we generate.\n",
    "* We **do not perform feature scaling** (removal of mean and standard error from the distribution) since a tell-tale sign of fraud would in fact be a higher than expected average or lower spread. These are vital to the analysis. A second stage of the analysis could work on feature-scaled data to estimate if fraud has been operated on the level of skewness, curtosis or higher moments, but the most obvious and effective instances of fraud happen at the level of average and standard deviation.\n",
    "* __Merge__: both sets need to be in one DataFrame by the end of it\n",
    "* __Shuffling__: Shuffling the real and fake data inside the DataFrames in order to remove correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">8</td>\n",
       "      <td>9995</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9996</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9997</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9998</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9999</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        1   2   3  4   5   6  source\n",
       "8 9995  6  11   4  6   8  12       0\n",
       "  9996  8  10   9  6   2  12       0\n",
       "  9997  9   8  10  9   7  13       0\n",
       "  9998  6   8   8  5   8   4       0\n",
       "  9999  9   7  11  7  15  10       0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "realDataRaw['source']=[1 for i in range(N_real)]\n",
    "fakeDataRaw['source']=[0 for i in range(np.shape(fakeDataRaw)[0])]\n",
    "fakeDataRaw.tail()\n",
    "#Tail check to see that the row label structure is fine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scaling (not implemented as a first pass)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn import preprocessing\n",
    "#realDataScaled = pd.DataFrame(preprocessing.scale(realDataRaw))\n",
    "#fakeDataScaled = pd.DataFrame(preprocessing.scale(fakeDataRaw))\n",
    "#this removes the mean and divides by the average "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Balancing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1401</td>\n",
       "      <td>17</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8715</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>180</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3074</td>\n",
       "      <td>15</td>\n",
       "      <td>16</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>496</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3194</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7316</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5112</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4443</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>16</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6269</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50000 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       1   2   3   4   5   6  source\n",
       "1401  17  11  10  11  10  15       0\n",
       "8715  13  15  13  15  15  11       0\n",
       "180   13  11  18  12  10  11       0\n",
       "3074  15  16   9  13  11  16       0\n",
       "496   11  13  18  14  14  15       0\n",
       "...   ..  ..  ..  ..  ..  ..     ...\n",
       "3194   8   5  15   8   8   7       0\n",
       "7316   5   9  10   7  10   8       0\n",
       "5112  10   7  15  13   4   9       0\n",
       "4443   4  11  10  16  11  12       0\n",
       "6269   8  10   9  10  12  11       0\n",
       "\n",
       "[50000 rows x 7 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fakeDataBalanced=pd.concat(\n",
    "    [\n",
    "        fakeDataRaw.xs(i+1).sample(int(np.ceil(N_real / N_fakecats))) \n",
    "     for i in range(N_fakecats)\n",
    "    ]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge and Shuffle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "allDataBalanced= pd.concat([realDataRaw, fakeDataBalanced],ignore_index=True)\n",
    "allDataShuffled=allDataBalanced.sample(frac=1)\n",
    "allDataShuffled.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now would be a good time to save the raw data in a file. We choose the Pickle format since it keeps index structures intact (especially hierarchical ones). Compression isn't required with the volume of data we treat but it is very effective. Altogether the file produced is much smaller than a compressed JSON file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "allDataShuffled.to_pickle('allDataBalanced.zip')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This completes the data generation protocol."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
